/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.com.ifba.salmos.requisicao.view;

import br.com.ifba.salmos.infrastructure.service.FacadeInstance;
import br.com.ifba.salmos.item.model.Item;
import br.com.ifba.salmos.requisicao.model.ItensDisponiveisTableModel;
import br.com.ifba.salmos.requisicao.model.ItensRequisitadosTableModel;
import br.com.ifba.salmos.requisicao.model.Requisicao;
import br.com.ifba.salmos.setor.model.Setor;
import br.com.ifba.salmos.usuario.model.Usuario;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JOptionPane;


/**
 *
 * @author rocki.julius
 */
public class ViewCadastroRequisicao extends javax.swing.JFrame {

    Item itemLocalizado;
    Item itemRequisitado;
    Usuario usuarioLogado;
    int qtdSolicitada;
    private List<Setor> setores;
    private Collection<Item> itens;
    private Collection<Item> itensDaRequisicao = new ArrayList();
    private List<Item> itensRequisitados = new ArrayList();
    ItensRequisitadosTableModel itensRequisitadosTable = new ItensRequisitadosTableModel();
    ItensDisponiveisTableModel itensDisponiveisTable = new ItensDisponiveisTableModel();
    
    
    /** Creates new form ViewCadastroRequisicao */
        
    public ViewCadastroRequisicao(Usuario usuarioLogado) {
        initComponents();
        setLocationRelativeTo(null);
        this.usuarioLogado = usuarioLogado;
        jLblUsuario.setText(usuarioLogado.getNome());
        iniciaComboBoxSetor();
        atualizaTabelaItensDisponiveis();
        atualizaTabelaItensRequisitados();
        
    }
    
    public ViewCadastroRequisicao() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblUsuario = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jCmBoxSetor = new javax.swing.JComboBox<>();
        jBtnRemoveListaRequisicao = new javax.swing.JButton();
        jBtnAdicionaListaRequisicao = new javax.swing.JButton();
        jSpinnerQuantidadeItemSelecionado = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableItensDisponiveis = new javax.swing.JTable();
        jBtnTelaRequisicoes = new javax.swing.JButton();
        jBtnSalvarRequisicao = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableItensRequisitados = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        jLabel3.setText("Itens disponíveis:");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        jLabel2.setText("Usuário requisitante:");

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        jLabel1.setText("Setor:");

        jCmBoxSetor.setFont(new java.awt.Font("Leelawadee UI", 0, 11)); // NOI18N

        jBtnRemoveListaRequisicao.setBackground(new java.awt.Color(250, 206, 101));
        jBtnRemoveListaRequisicao.setFont(new java.awt.Font("Leelawadee UI", 1, 11)); // NOI18N
        jBtnRemoveListaRequisicao.setText("<<<");
        jBtnRemoveListaRequisicao.setToolTipText("Remover Item");
        jBtnRemoveListaRequisicao.setBorder(null);
        jBtnRemoveListaRequisicao.setEnabled(false);
        jBtnRemoveListaRequisicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveListaRequisicaoActionPerformed(evt);
            }
        });

        jBtnAdicionaListaRequisicao.setBackground(new java.awt.Color(250, 206, 101));
        jBtnAdicionaListaRequisicao.setFont(new java.awt.Font("Leelawadee UI", 1, 11)); // NOI18N
        jBtnAdicionaListaRequisicao.setText(">>>");
        jBtnAdicionaListaRequisicao.setToolTipText("Adicionar Item");
        jBtnAdicionaListaRequisicao.setBorder(null);
        jBtnAdicionaListaRequisicao.setEnabled(false);
        jBtnAdicionaListaRequisicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAdicionaListaRequisicaoActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Leelawadee UI", 1, 12)); // NOI18N
        jLabel4.setText("Quantidade:");

        jTableItensDisponiveis.setForeground(new java.awt.Color(250, 206, 101));
        jTableItensDisponiveis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableItensDisponiveis.setToolTipText("ItensDisponíveis");
        jTableItensDisponiveis.getTableHeader().setReorderingAllowed(false);
        jTableItensDisponiveis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTableItensDisponiveisFocusLost(evt);
            }
        });
        jTableItensDisponiveis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItensDisponiveisMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableItensDisponiveis);

        jBtnTelaRequisicoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/salmos/image/icons8-voltar-35.png"))); // NOI18N
        jBtnTelaRequisicoes.setToolTipText("Voltar tela");
        jBtnTelaRequisicoes.setBorder(null);
        jBtnTelaRequisicoes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnTelaRequisicoes.setPreferredSize(new java.awt.Dimension(67, 43));
        jBtnTelaRequisicoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnTelaRequisicoesActionPerformed(evt);
            }
        });

        jBtnSalvarRequisicao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/salmos/image/icons8-salvar-35.png"))); // NOI18N
        jBtnSalvarRequisicao.setToolTipText("Salvar Requisição");
        jBtnSalvarRequisicao.setBorder(null);
        jBtnSalvarRequisicao.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBtnSalvarRequisicao.setPreferredSize(new java.awt.Dimension(67, 43));
        jBtnSalvarRequisicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalvarRequisicaoActionPerformed(evt);
            }
        });

        jTableItensRequisitados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableItensRequisitados.getTableHeader().setReorderingAllowed(false);
        jTableItensRequisitados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItensRequisitadosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableItensRequisitados);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Itens requisitados:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jCmBoxSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(372, 372, 372)
                                .addComponent(jLabel5))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBtnTelaRequisicoes, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnSalvarRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinnerQuantidadeItemSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jBtnAdicionaListaRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jBtnRemoveListaRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(21, 21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCmBoxSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinnerQuantidadeItemSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(41, 41, 41)
                                .addComponent(jBtnAdicionaListaRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jBtnRemoveListaRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnSalvarRequisicao, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnTelaRequisicoes, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnTelaRequisicoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnTelaRequisicoesActionPerformed
        new ViewRequisicao(usuarioLogado).setVisible(true);
        dispose();
    }//GEN-LAST:event_jBtnTelaRequisicoesActionPerformed

    private void jBtnAdicionaListaRequisicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAdicionaListaRequisicaoActionPerformed
        int codItem = pegaCod();
        qtdSolicitada = Integer.parseInt(jSpinnerQuantidadeItemSelecionado.getValue().toString());
        itemLocalizado = localizaItem(codItem);
                                       
        if(verificaQuantidadeAdicionar(itemLocalizado, qtdSolicitada) == true){
            int posItem = verificaItemRequisitado(itemLocalizado);
            if(posItem == -1){          //-1 pois o table inicia em 0, caso testasse para 0 duplicaria os itens na lista
                itemRequisitado = alteraInformacoesItem(itemLocalizado, qtdSolicitada);         // cópia do item localizado para o item requisitado, alterando o valor solicitado apenas
                itensRequisitados.add(itemRequisitado);
                itensRequisitadosTable.atualizaTabelaRequisicao(itensRequisitados);
                jTableItensRequisitados.setModel(itensRequisitadosTable);
            }else{
                
                itensRequisitados.get(posItem).setQuantidade(itensRequisitados.get(posItem).getQuantidade() + qtdSolicitada);
                itensRequisitadosTable.atualizaTabelaRequisicao(itensRequisitados);
            }
            jBtnAdicionaListaRequisicao.setEnabled(false);
        }
        
    }//GEN-LAST:event_jBtnAdicionaListaRequisicaoActionPerformed

    private void jTableItensDisponiveisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItensDisponiveisMouseClicked
        jBtnAdicionaListaRequisicao.setEnabled(true);
        jBtnRemoveListaRequisicao.setEnabled(false);
    }//GEN-LAST:event_jTableItensDisponiveisMouseClicked

    private void jTableItensDisponiveisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableItensDisponiveisFocusLost

    }//GEN-LAST:event_jTableItensDisponiveisFocusLost

    private void jBtnSalvarRequisicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalvarRequisicaoActionPerformed
        if(itensRequisitados.size() > 0){
            Requisicao req = new Requisicao();
            migraItensRequisicao();
            req.setListaItens(itensDaRequisicao);
            req.setUsuario(usuarioLogado.getId());
            req.setSetor(jCmBoxSetor.getSelectedItem().toString());
            FacadeInstance.getInstance().saveRequisicao(req);
            itemLocalizado.setQuantidade(itemLocalizado.getQuantidade() - qtdSolicitada);
            FacadeInstance.getInstance().updateItem(itemLocalizado);    
        
            atualizaTabelaItensDisponiveis();
            itensRequisitados.clear();
            JOptionPane.showMessageDialog(null, "Requisição cadastrada com sucesso!");
        }else{
            JOptionPane.showMessageDialog(null, "Adicione ao menos um item na requisição antes de salvá-la.");
        }
    }//GEN-LAST:event_jBtnSalvarRequisicaoActionPerformed

    private void jBtnRemoveListaRequisicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveListaRequisicaoActionPerformed
        qtdSolicitada = Integer.parseInt(jSpinnerQuantidadeItemSelecionado.getValue().toString());
        int codItem = Integer.parseInt(jTableItensRequisitados.getValueAt(jTableItensRequisitados.getSelectedRow(), 0).toString());
        if(qtdSolicitada > 0){
            if(qtdSolicitada >= Integer.parseInt(jTableItensRequisitados.getValueAt(jTableItensRequisitados.getSelectedRow(), 2).toString())){
                excluiItemTabelaRequisitado(codItem);
                itensRequisitadosTable.atualizaTabelaRequisicao(itensRequisitados);
            }else{
                atualizarItemTabelaRequisicao(codItem, qtdSolicitada);
                itensRequisitadosTable.atualizaTabelaRequisicao(itensRequisitados);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Quantidade selecionada inválida!");
        }
        jBtnRemoveListaRequisicao.setEnabled(false);
    }//GEN-LAST:event_jBtnRemoveListaRequisicaoActionPerformed

    private void jTableItensRequisitadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItensRequisitadosMouseClicked
        jBtnRemoveListaRequisicao.setEnabled(true);
        jBtnAdicionaListaRequisicao.setEnabled(false);
    }//GEN-LAST:event_jTableItensRequisitadosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewCadastroRequisicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewCadastroRequisicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewCadastroRequisicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewCadastroRequisicao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewCadastroRequisicao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAdicionaListaRequisicao;
    private javax.swing.JButton jBtnRemoveListaRequisicao;
    private javax.swing.JButton jBtnSalvarRequisicao;
    private javax.swing.JButton jBtnTelaRequisicoes;
    private javax.swing.JComboBox<String> jCmBoxSetor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLblUsuario;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinnerQuantidadeItemSelecionado;
    private javax.swing.JTable jTableItensDisponiveis;
    private javax.swing.JTable jTableItensRequisitados;
    // End of variables declaration//GEN-END:variables

    private boolean verificaQuantidadeAdicionar(Item itemLocalizado, int qtdSolicitada) {
        boolean qtd = false;
        int qntSolicitada = qtdSolicitada;
        
        if(qtdSolicitada <= 0){
         JOptionPane.showMessageDialog(null, "Quantidade solicitada não pode ser menor ou igual a 0!");
        }else{    
            if(itemLocalizado.getQuantidade() < qntSolicitada){
                JOptionPane.showMessageDialog(null, "Quantidade solicitada maior que quantidade disponível!");
                qtd = false;
            }else{
                qtd = true;
            }
        }
        return qtd;
    }
   
    private int pegaCod(){
        int linha = jTableItensDisponiveis.getSelectedRow();
        int cod = Integer.parseInt(itensDisponiveisTable.getValueAt(linha, 0).toString());
        return cod;
    }
    
    private void iniciaComboBoxSetor(){
        setores = FacadeInstance.getInstance().getAllSetor();
        for(int x = 0; x < setores.size(); x++){
            jCmBoxSetor.addItem(setores.get(x).getNome());
        }
    }
    
    private void atualizaTabelaItensDisponiveis() {
        itensDisponiveisTable.atualizaTabelaRequisicao();
        jTableItensDisponiveis.setModel(itensDisponiveisTable);
    }

    private void atualizaTabelaItensRequisitados() {
        itensRequisitadosTable.atualizaTabelaRequisicao(itensRequisitados);
        jTableItensRequisitados.setModel(itensRequisitadosTable);
    }
    
    private Item localizaItem(int cod) {
        Item itemALocalizar = new Item();
        itens = FacadeInstance.getInstance().getAllItem();
                
        for(Item itens: itens){
            if(itens.getId() == cod){
                itemALocalizar = itens;
                break;
            }
        }
              
        return itemALocalizar;
    }
    
    private Item alteraInformacoesItem(Item itemLocalizado, int qtdSolicitada) {
        itemRequisitado = new Item();
        itemRequisitado.setId(itemLocalizado.getId());
        itemRequisitado.setDescricao(itemLocalizado.getDescricao());
        itemRequisitado.setNome(itemLocalizado.getNome());
        itemRequisitado.setQuantidade(qtdSolicitada);
        return itemRequisitado;
    }

    private int verificaItemRequisitado(Item item) {
        int existe = -1;
        
        for(int x = 0; x < itensRequisitados.size(); x++){
            if(item.getId().equals(itensRequisitadosTable.getValueAt(x, 0)))
                existe = x;
        }
        return existe;
    }

    private void excluiItemTabelaRequisitado(int codItem) {
        for(int x =0; x < itensRequisitados.size(); x++){
            if(itensRequisitados.get(x).getId() == codItem){
                itensRequisitados.remove(x);
            }
        }
    }

    private void atualizarItemTabelaRequisicao(int codItem, int qtdRetirar) {
        for(int x =0; x < itensRequisitados.size(); x++){
            if(itensRequisitados.get(x).getId() == codItem){
                itensRequisitados.get(x).setQuantidade(itensRequisitados.get(x).getQuantidade() - qtdRetirar);
            }
        }
    }

    private void migraItensRequisicao() {
        for(int x = 0; x < itensRequisitados.size(); x++){
            itensDaRequisicao.add(itensRequisitados.get(x));
        }
    }
}
